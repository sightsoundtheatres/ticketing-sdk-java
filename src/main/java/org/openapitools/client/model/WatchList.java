/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Order;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sightsound.sdk.ticketing.JSON;

/**
 * WatchList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-30T15:31:17.450182-05:00[America/Chicago]")
public class WatchList {
  public static final String SERIALIZED_NAME_WATCH_LIST_NUMBER = "watchListNumber";
  @SerializedName(SERIALIZED_NAME_WATCH_LIST_NUMBER)
  private Integer watchListNumber;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private Long orderNumber;

  public static final String SERIALIZED_NAME_DEADLINE_DATE = "deadlineDate";
  @SerializedName(SERIALIZED_NAME_DEADLINE_DATE)
  private OffsetDateTime deadlineDate;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_ADD_USER_ID = "addUserId";
  @SerializedName(SERIALIZED_NAME_ADD_USER_ID)
  private String addUserId;

  public static final String SERIALIZED_NAME_ADD_DATE = "addDate";
  @SerializedName(SERIALIZED_NAME_ADD_DATE)
  private OffsetDateTime addDate;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DEACTIVATE_DATE = "deactivateDate";
  @SerializedName(SERIALIZED_NAME_DEACTIVATE_DATE)
  private OffsetDateTime deactivateDate;

  public static final String SERIALIZED_NAME_CUSTOMER_NUMBER = "customerNumber";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NUMBER)
  private Long customerNumber;

  public static final String SERIALIZED_NAME_DEACTIVATE_USER_ID = "deactivateUserId";
  @SerializedName(SERIALIZED_NAME_DEACTIVATE_USER_ID)
  private String deactivateUserId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public static final String SERIALIZED_NAME_ASSIGNED_TO_USER_ID = "assignedToUserId";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO_USER_ID)
  private String assignedToUserId;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Order order;

  public WatchList() { 
  }

  public WatchList watchListNumber(Integer watchListNumber) {
    
    this.watchListNumber = watchListNumber;
    return this;
  }

   /**
   * Get watchListNumber
   * @return watchListNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWatchListNumber() {
    return watchListNumber;
  }


  public void setWatchListNumber(Integer watchListNumber) {
    this.watchListNumber = watchListNumber;
  }


  public WatchList orderNumber(Long orderNumber) {
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Get orderNumber
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(Long orderNumber) {
    this.orderNumber = orderNumber;
  }


  public WatchList deadlineDate(OffsetDateTime deadlineDate) {
    
    this.deadlineDate = deadlineDate;
    return this;
  }

   /**
   * Get deadlineDate
   * @return deadlineDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeadlineDate() {
    return deadlineDate;
  }


  public void setDeadlineDate(OffsetDateTime deadlineDate) {
    this.deadlineDate = deadlineDate;
  }


  public WatchList comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public WatchList addUserId(String addUserId) {
    
    this.addUserId = addUserId;
    return this;
  }

   /**
   * Get addUserId
   * @return addUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddUserId() {
    return addUserId;
  }


  public void setAddUserId(String addUserId) {
    this.addUserId = addUserId;
  }


  public WatchList addDate(OffsetDateTime addDate) {
    
    this.addDate = addDate;
    return this;
  }

   /**
   * Get addDate
   * @return addDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAddDate() {
    return addDate;
  }


  public void setAddDate(OffsetDateTime addDate) {
    this.addDate = addDate;
  }


  public WatchList active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public WatchList deactivateDate(OffsetDateTime deactivateDate) {
    
    this.deactivateDate = deactivateDate;
    return this;
  }

   /**
   * Get deactivateDate
   * @return deactivateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeactivateDate() {
    return deactivateDate;
  }


  public void setDeactivateDate(OffsetDateTime deactivateDate) {
    this.deactivateDate = deactivateDate;
  }


  public WatchList customerNumber(Long customerNumber) {
    
    this.customerNumber = customerNumber;
    return this;
  }

   /**
   * Get customerNumber
   * @return customerNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCustomerNumber() {
    return customerNumber;
  }


  public void setCustomerNumber(Long customerNumber) {
    this.customerNumber = customerNumber;
  }


  public WatchList deactivateUserId(String deactivateUserId) {
    
    this.deactivateUserId = deactivateUserId;
    return this;
  }

   /**
   * Get deactivateUserId
   * @return deactivateUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeactivateUserId() {
    return deactivateUserId;
  }


  public void setDeactivateUserId(String deactivateUserId) {
    this.deactivateUserId = deactivateUserId;
  }


  public WatchList lastModifiedDate(OffsetDateTime lastModifiedDate) {
    
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * Get lastModifiedDate
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }


  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public WatchList assignedToUserId(String assignedToUserId) {
    
    this.assignedToUserId = assignedToUserId;
    return this;
  }

   /**
   * Get assignedToUserId
   * @return assignedToUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssignedToUserId() {
    return assignedToUserId;
  }


  public void setAssignedToUserId(String assignedToUserId) {
    this.assignedToUserId = assignedToUserId;
  }


  public WatchList order(Order order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Order getOrder() {
    return order;
  }


  public void setOrder(Order order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchList watchList = (WatchList) o;
    return Objects.equals(this.watchListNumber, watchList.watchListNumber) &&
        Objects.equals(this.orderNumber, watchList.orderNumber) &&
        Objects.equals(this.deadlineDate, watchList.deadlineDate) &&
        Objects.equals(this.comments, watchList.comments) &&
        Objects.equals(this.addUserId, watchList.addUserId) &&
        Objects.equals(this.addDate, watchList.addDate) &&
        Objects.equals(this.active, watchList.active) &&
        Objects.equals(this.deactivateDate, watchList.deactivateDate) &&
        Objects.equals(this.customerNumber, watchList.customerNumber) &&
        Objects.equals(this.deactivateUserId, watchList.deactivateUserId) &&
        Objects.equals(this.lastModifiedDate, watchList.lastModifiedDate) &&
        Objects.equals(this.assignedToUserId, watchList.assignedToUserId) &&
        Objects.equals(this.order, watchList.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(watchListNumber, orderNumber, deadlineDate, comments, addUserId, addDate, active, deactivateDate, customerNumber, deactivateUserId, lastModifiedDate, assignedToUserId, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchList {\n");
    sb.append("    watchListNumber: ").append(toIndentedString(watchListNumber)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    deadlineDate: ").append(toIndentedString(deadlineDate)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    addUserId: ").append(toIndentedString(addUserId)).append("\n");
    sb.append("    addDate: ").append(toIndentedString(addDate)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    deactivateDate: ").append(toIndentedString(deactivateDate)).append("\n");
    sb.append("    customerNumber: ").append(toIndentedString(customerNumber)).append("\n");
    sb.append("    deactivateUserId: ").append(toIndentedString(deactivateUserId)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    assignedToUserId: ").append(toIndentedString(assignedToUserId)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("watchListNumber");
    openapiFields.add("orderNumber");
    openapiFields.add("deadlineDate");
    openapiFields.add("comments");
    openapiFields.add("addUserId");
    openapiFields.add("addDate");
    openapiFields.add("active");
    openapiFields.add("deactivateDate");
    openapiFields.add("customerNumber");
    openapiFields.add("deactivateUserId");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("assignedToUserId");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WatchList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WatchList.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchList is not found in the empty JSON string", WatchList.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WatchList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchList.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (jsonObj.get("addUserId") != null && !jsonObj.get("addUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addUserId").toString()));
      }
      if (jsonObj.get("deactivateUserId") != null && !jsonObj.get("deactivateUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deactivateUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deactivateUserId").toString()));
      }
      if (jsonObj.get("assignedToUserId") != null && !jsonObj.get("assignedToUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedToUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedToUserId").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.getAsJsonObject("order") != null) {
        Order.validateJsonObject(jsonObj.getAsJsonObject("order"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchList.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchList>() {
           @Override
           public void write(JsonWriter out, WatchList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WatchList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WatchList
  * @throws IOException if the JSON string is invalid with respect to WatchList
  */
  public static WatchList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchList.class);
  }

 /**
  * Convert an instance of WatchList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

