/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.DeviceRenderOptions;
import org.openapitools.client.model.SDKEphemPubKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sightsound.sdk.ticketing.JSON;

/**
 * ThreeDS2RequestData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-30T15:31:17.450182-05:00[America/Chicago]")
public class ThreeDS2RequestData {
  public static final String SERIALIZED_NAME_AUTHENTICATION_ONLY = "authenticationOnly";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ONLY)
  private Boolean authenticationOnly;

  /**
   * Gets or Sets challengeIndicator
   */
  @JsonAdapter(ChallengeIndicatorEnum.Adapter.class)
  public enum ChallengeIndicatorEnum {
    NOPREFERENCE("noPreference"),
    
    REQUESTCHALLENGE("requestChallenge"),
    
    REQUESTNOCHALLENGE("requestNoChallenge"),
    
    REQUESTCHALLENGEASMANDATE("requestChallengeAsMandate");

    private String value;

    ChallengeIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChallengeIndicatorEnum fromValue(String value) {
      for (ChallengeIndicatorEnum b : ChallengeIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChallengeIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChallengeIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChallengeIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChallengeIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHALLENGE_INDICATOR = "challengeIndicator";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_INDICATOR)
  private ChallengeIndicatorEnum challengeIndicator;

  public static final String SERIALIZED_NAME_DEVICE_CHANNEL = "deviceChannel";
  @SerializedName(SERIALIZED_NAME_DEVICE_CHANNEL)
  private String deviceChannel;

  public static final String SERIALIZED_NAME_DEVICE_RENDER_OPTIONS = "deviceRenderOptions";
  @SerializedName(SERIALIZED_NAME_DEVICE_RENDER_OPTIONS)
  private DeviceRenderOptions deviceRenderOptions;

  public static final String SERIALIZED_NAME_NOTIFICATION_U_R_L = "notificationURL";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_U_R_L)
  private String notificationURL;

  public static final String SERIALIZED_NAME_SDK_APP_I_D = "sdkAppID";
  @SerializedName(SERIALIZED_NAME_SDK_APP_I_D)
  private String sdkAppID;

  public static final String SERIALIZED_NAME_SDK_ENC_DATA = "sdkEncData";
  @SerializedName(SERIALIZED_NAME_SDK_ENC_DATA)
  private String sdkEncData;

  public static final String SERIALIZED_NAME_SDK_EPHEM_PUB_KEY = "sdkEphemPubKey";
  @SerializedName(SERIALIZED_NAME_SDK_EPHEM_PUB_KEY)
  private SDKEphemPubKey sdkEphemPubKey;

  public static final String SERIALIZED_NAME_SDK_MAX_TIMEOUT = "sdkMaxTimeout";
  @SerializedName(SERIALIZED_NAME_SDK_MAX_TIMEOUT)
  private Integer sdkMaxTimeout;

  public static final String SERIALIZED_NAME_SDK_REFERENCE_NUMBER = "sdkReferenceNumber";
  @SerializedName(SERIALIZED_NAME_SDK_REFERENCE_NUMBER)
  private String sdkReferenceNumber;

  public static final String SERIALIZED_NAME_SDK_TRANS_I_D = "sdkTransID";
  @SerializedName(SERIALIZED_NAME_SDK_TRANS_I_D)
  private String sdkTransID;

  public static final String SERIALIZED_NAME_THREE_D_S_COMP_IND = "threeDSCompInd";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_COMP_IND)
  private String threeDSCompInd;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_U_R_L = "threeDSRequestorURL";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_U_R_L)
  private String threeDSRequestorURL;

  public static final String SERIALIZED_NAME_THREE_D_S_SERVER_TRANS_I_D = "threeDSServerTransID";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_SERVER_TRANS_I_D)
  private String threeDSServerTransID;

  public static final String SERIALIZED_NAME_MESSAGE_VERSION = "messageVersion";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VERSION)
  private String messageVersion;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_I_D = "threeDSRequestorID";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_I_D)
  private String threeDSRequestorID;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_CHALLENGE_IND = "threeDSRequestorChallengeInd";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_CHALLENGE_IND)
  private String threeDSRequestorChallengeInd;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_NAME = "threeDSRequestorName";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_NAME)
  private String threeDSRequestorName;

  public static final String SERIALIZED_NAME_ACQUIRER_B_I_N = "acquirerBIN";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_B_I_N)
  private String acquirerBIN;

  public static final String SERIALIZED_NAME_ACQUIRER_MERCHANT_I_D = "acquirerMerchantID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_MERCHANT_I_D)
  private String acquirerMerchantID;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  /**
   * Gets or Sets transactionType
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    GOODSORSERVICEPURCHASE("goodsOrServicePurchase"),
    
    CHECKACCEPTANCE("checkAcceptance"),
    
    ACCOUNTFUNDING("accountFunding"),
    
    QUASICASHTRANSACTION("quasiCashTransaction"),
    
    PREPAIDACTIVATIONANDLOAD("prepaidActivationAndLoad");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public static final String SERIALIZED_NAME_WHITE_LIST_STATUS = "whiteListStatus";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST_STATUS)
  private String whiteListStatus;

  public ThreeDS2RequestData() { 
  }

  public ThreeDS2RequestData authenticationOnly(Boolean authenticationOnly) {
    
    this.authenticationOnly = authenticationOnly;
    return this;
  }

   /**
   * Get authenticationOnly
   * @return authenticationOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAuthenticationOnly() {
    return authenticationOnly;
  }


  public void setAuthenticationOnly(Boolean authenticationOnly) {
    this.authenticationOnly = authenticationOnly;
  }


  public ThreeDS2RequestData challengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    
    this.challengeIndicator = challengeIndicator;
    return this;
  }

   /**
   * Get challengeIndicator
   * @return challengeIndicator
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChallengeIndicatorEnum getChallengeIndicator() {
    return challengeIndicator;
  }


  public void setChallengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    this.challengeIndicator = challengeIndicator;
  }


  public ThreeDS2RequestData deviceChannel(String deviceChannel) {
    
    this.deviceChannel = deviceChannel;
    return this;
  }

   /**
   * Get deviceChannel
   * @return deviceChannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeviceChannel() {
    return deviceChannel;
  }


  public void setDeviceChannel(String deviceChannel) {
    this.deviceChannel = deviceChannel;
  }


  public ThreeDS2RequestData deviceRenderOptions(DeviceRenderOptions deviceRenderOptions) {
    
    this.deviceRenderOptions = deviceRenderOptions;
    return this;
  }

   /**
   * Get deviceRenderOptions
   * @return deviceRenderOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceRenderOptions getDeviceRenderOptions() {
    return deviceRenderOptions;
  }


  public void setDeviceRenderOptions(DeviceRenderOptions deviceRenderOptions) {
    this.deviceRenderOptions = deviceRenderOptions;
  }


  public ThreeDS2RequestData notificationURL(String notificationURL) {
    
    this.notificationURL = notificationURL;
    return this;
  }

   /**
   * Get notificationURL
   * @return notificationURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotificationURL() {
    return notificationURL;
  }


  public void setNotificationURL(String notificationURL) {
    this.notificationURL = notificationURL;
  }


  public ThreeDS2RequestData sdkAppID(String sdkAppID) {
    
    this.sdkAppID = sdkAppID;
    return this;
  }

   /**
   * Get sdkAppID
   * @return sdkAppID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSdkAppID() {
    return sdkAppID;
  }


  public void setSdkAppID(String sdkAppID) {
    this.sdkAppID = sdkAppID;
  }


  public ThreeDS2RequestData sdkEncData(String sdkEncData) {
    
    this.sdkEncData = sdkEncData;
    return this;
  }

   /**
   * Get sdkEncData
   * @return sdkEncData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSdkEncData() {
    return sdkEncData;
  }


  public void setSdkEncData(String sdkEncData) {
    this.sdkEncData = sdkEncData;
  }


  public ThreeDS2RequestData sdkEphemPubKey(SDKEphemPubKey sdkEphemPubKey) {
    
    this.sdkEphemPubKey = sdkEphemPubKey;
    return this;
  }

   /**
   * Get sdkEphemPubKey
   * @return sdkEphemPubKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SDKEphemPubKey getSdkEphemPubKey() {
    return sdkEphemPubKey;
  }


  public void setSdkEphemPubKey(SDKEphemPubKey sdkEphemPubKey) {
    this.sdkEphemPubKey = sdkEphemPubKey;
  }


  public ThreeDS2RequestData sdkMaxTimeout(Integer sdkMaxTimeout) {
    
    this.sdkMaxTimeout = sdkMaxTimeout;
    return this;
  }

   /**
   * Get sdkMaxTimeout
   * @return sdkMaxTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSdkMaxTimeout() {
    return sdkMaxTimeout;
  }


  public void setSdkMaxTimeout(Integer sdkMaxTimeout) {
    this.sdkMaxTimeout = sdkMaxTimeout;
  }


  public ThreeDS2RequestData sdkReferenceNumber(String sdkReferenceNumber) {
    
    this.sdkReferenceNumber = sdkReferenceNumber;
    return this;
  }

   /**
   * Get sdkReferenceNumber
   * @return sdkReferenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSdkReferenceNumber() {
    return sdkReferenceNumber;
  }


  public void setSdkReferenceNumber(String sdkReferenceNumber) {
    this.sdkReferenceNumber = sdkReferenceNumber;
  }


  public ThreeDS2RequestData sdkTransID(String sdkTransID) {
    
    this.sdkTransID = sdkTransID;
    return this;
  }

   /**
   * Get sdkTransID
   * @return sdkTransID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSdkTransID() {
    return sdkTransID;
  }


  public void setSdkTransID(String sdkTransID) {
    this.sdkTransID = sdkTransID;
  }


  public ThreeDS2RequestData threeDSCompInd(String threeDSCompInd) {
    
    this.threeDSCompInd = threeDSCompInd;
    return this;
  }

   /**
   * Get threeDSCompInd
   * @return threeDSCompInd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSCompInd() {
    return threeDSCompInd;
  }


  public void setThreeDSCompInd(String threeDSCompInd) {
    this.threeDSCompInd = threeDSCompInd;
  }


  public ThreeDS2RequestData threeDSRequestorURL(String threeDSRequestorURL) {
    
    this.threeDSRequestorURL = threeDSRequestorURL;
    return this;
  }

   /**
   * Get threeDSRequestorURL
   * @return threeDSRequestorURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSRequestorURL() {
    return threeDSRequestorURL;
  }


  public void setThreeDSRequestorURL(String threeDSRequestorURL) {
    this.threeDSRequestorURL = threeDSRequestorURL;
  }


  public ThreeDS2RequestData threeDSServerTransID(String threeDSServerTransID) {
    
    this.threeDSServerTransID = threeDSServerTransID;
    return this;
  }

   /**
   * Get threeDSServerTransID
   * @return threeDSServerTransID
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSServerTransID() {
    return threeDSServerTransID;
  }


  public void setThreeDSServerTransID(String threeDSServerTransID) {
    this.threeDSServerTransID = threeDSServerTransID;
  }


  public ThreeDS2RequestData messageVersion(String messageVersion) {
    
    this.messageVersion = messageVersion;
    return this;
  }

   /**
   * Get messageVersion
   * @return messageVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessageVersion() {
    return messageVersion;
  }


  public void setMessageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
  }


  public ThreeDS2RequestData threeDSRequestorID(String threeDSRequestorID) {
    
    this.threeDSRequestorID = threeDSRequestorID;
    return this;
  }

   /**
   * Get threeDSRequestorID
   * @return threeDSRequestorID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSRequestorID() {
    return threeDSRequestorID;
  }


  public void setThreeDSRequestorID(String threeDSRequestorID) {
    this.threeDSRequestorID = threeDSRequestorID;
  }


  public ThreeDS2RequestData threeDSRequestorChallengeInd(String threeDSRequestorChallengeInd) {
    
    this.threeDSRequestorChallengeInd = threeDSRequestorChallengeInd;
    return this;
  }

   /**
   * Get threeDSRequestorChallengeInd
   * @return threeDSRequestorChallengeInd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSRequestorChallengeInd() {
    return threeDSRequestorChallengeInd;
  }


  public void setThreeDSRequestorChallengeInd(String threeDSRequestorChallengeInd) {
    this.threeDSRequestorChallengeInd = threeDSRequestorChallengeInd;
  }


  public ThreeDS2RequestData threeDSRequestorName(String threeDSRequestorName) {
    
    this.threeDSRequestorName = threeDSRequestorName;
    return this;
  }

   /**
   * Get threeDSRequestorName
   * @return threeDSRequestorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreeDSRequestorName() {
    return threeDSRequestorName;
  }


  public void setThreeDSRequestorName(String threeDSRequestorName) {
    this.threeDSRequestorName = threeDSRequestorName;
  }


  public ThreeDS2RequestData acquirerBIN(String acquirerBIN) {
    
    this.acquirerBIN = acquirerBIN;
    return this;
  }

   /**
   * Get acquirerBIN
   * @return acquirerBIN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcquirerBIN() {
    return acquirerBIN;
  }


  public void setAcquirerBIN(String acquirerBIN) {
    this.acquirerBIN = acquirerBIN;
  }


  public ThreeDS2RequestData acquirerMerchantID(String acquirerMerchantID) {
    
    this.acquirerMerchantID = acquirerMerchantID;
    return this;
  }

   /**
   * Get acquirerMerchantID
   * @return acquirerMerchantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcquirerMerchantID() {
    return acquirerMerchantID;
  }


  public void setAcquirerMerchantID(String acquirerMerchantID) {
    this.acquirerMerchantID = acquirerMerchantID;
  }


  public ThreeDS2RequestData mcc(String mcc) {
    
    this.mcc = mcc;
    return this;
  }

   /**
   * Get mcc
   * @return mcc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMcc() {
    return mcc;
  }


  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public ThreeDS2RequestData merchantName(String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Get merchantName
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public ThreeDS2RequestData transactionType(TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }


  public ThreeDS2RequestData whiteListStatus(String whiteListStatus) {
    
    this.whiteListStatus = whiteListStatus;
    return this;
  }

   /**
   * Get whiteListStatus
   * @return whiteListStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWhiteListStatus() {
    return whiteListStatus;
  }


  public void setWhiteListStatus(String whiteListStatus) {
    this.whiteListStatus = whiteListStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDS2RequestData threeDS2RequestData = (ThreeDS2RequestData) o;
    return Objects.equals(this.authenticationOnly, threeDS2RequestData.authenticationOnly) &&
        Objects.equals(this.challengeIndicator, threeDS2RequestData.challengeIndicator) &&
        Objects.equals(this.deviceChannel, threeDS2RequestData.deviceChannel) &&
        Objects.equals(this.deviceRenderOptions, threeDS2RequestData.deviceRenderOptions) &&
        Objects.equals(this.notificationURL, threeDS2RequestData.notificationURL) &&
        Objects.equals(this.sdkAppID, threeDS2RequestData.sdkAppID) &&
        Objects.equals(this.sdkEncData, threeDS2RequestData.sdkEncData) &&
        Objects.equals(this.sdkEphemPubKey, threeDS2RequestData.sdkEphemPubKey) &&
        Objects.equals(this.sdkMaxTimeout, threeDS2RequestData.sdkMaxTimeout) &&
        Objects.equals(this.sdkReferenceNumber, threeDS2RequestData.sdkReferenceNumber) &&
        Objects.equals(this.sdkTransID, threeDS2RequestData.sdkTransID) &&
        Objects.equals(this.threeDSCompInd, threeDS2RequestData.threeDSCompInd) &&
        Objects.equals(this.threeDSRequestorURL, threeDS2RequestData.threeDSRequestorURL) &&
        Objects.equals(this.threeDSServerTransID, threeDS2RequestData.threeDSServerTransID) &&
        Objects.equals(this.messageVersion, threeDS2RequestData.messageVersion) &&
        Objects.equals(this.threeDSRequestorID, threeDS2RequestData.threeDSRequestorID) &&
        Objects.equals(this.threeDSRequestorChallengeInd, threeDS2RequestData.threeDSRequestorChallengeInd) &&
        Objects.equals(this.threeDSRequestorName, threeDS2RequestData.threeDSRequestorName) &&
        Objects.equals(this.acquirerBIN, threeDS2RequestData.acquirerBIN) &&
        Objects.equals(this.acquirerMerchantID, threeDS2RequestData.acquirerMerchantID) &&
        Objects.equals(this.mcc, threeDS2RequestData.mcc) &&
        Objects.equals(this.merchantName, threeDS2RequestData.merchantName) &&
        Objects.equals(this.transactionType, threeDS2RequestData.transactionType) &&
        Objects.equals(this.whiteListStatus, threeDS2RequestData.whiteListStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationOnly, challengeIndicator, deviceChannel, deviceRenderOptions, notificationURL, sdkAppID, sdkEncData, sdkEphemPubKey, sdkMaxTimeout, sdkReferenceNumber, sdkTransID, threeDSCompInd, threeDSRequestorURL, threeDSServerTransID, messageVersion, threeDSRequestorID, threeDSRequestorChallengeInd, threeDSRequestorName, acquirerBIN, acquirerMerchantID, mcc, merchantName, transactionType, whiteListStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDS2RequestData {\n");
    sb.append("    authenticationOnly: ").append(toIndentedString(authenticationOnly)).append("\n");
    sb.append("    challengeIndicator: ").append(toIndentedString(challengeIndicator)).append("\n");
    sb.append("    deviceChannel: ").append(toIndentedString(deviceChannel)).append("\n");
    sb.append("    deviceRenderOptions: ").append(toIndentedString(deviceRenderOptions)).append("\n");
    sb.append("    notificationURL: ").append(toIndentedString(notificationURL)).append("\n");
    sb.append("    sdkAppID: ").append(toIndentedString(sdkAppID)).append("\n");
    sb.append("    sdkEncData: ").append(toIndentedString(sdkEncData)).append("\n");
    sb.append("    sdkEphemPubKey: ").append(toIndentedString(sdkEphemPubKey)).append("\n");
    sb.append("    sdkMaxTimeout: ").append(toIndentedString(sdkMaxTimeout)).append("\n");
    sb.append("    sdkReferenceNumber: ").append(toIndentedString(sdkReferenceNumber)).append("\n");
    sb.append("    sdkTransID: ").append(toIndentedString(sdkTransID)).append("\n");
    sb.append("    threeDSCompInd: ").append(toIndentedString(threeDSCompInd)).append("\n");
    sb.append("    threeDSRequestorURL: ").append(toIndentedString(threeDSRequestorURL)).append("\n");
    sb.append("    threeDSServerTransID: ").append(toIndentedString(threeDSServerTransID)).append("\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    threeDSRequestorID: ").append(toIndentedString(threeDSRequestorID)).append("\n");
    sb.append("    threeDSRequestorChallengeInd: ").append(toIndentedString(threeDSRequestorChallengeInd)).append("\n");
    sb.append("    threeDSRequestorName: ").append(toIndentedString(threeDSRequestorName)).append("\n");
    sb.append("    acquirerBIN: ").append(toIndentedString(acquirerBIN)).append("\n");
    sb.append("    acquirerMerchantID: ").append(toIndentedString(acquirerMerchantID)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    whiteListStatus: ").append(toIndentedString(whiteListStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationOnly");
    openapiFields.add("challengeIndicator");
    openapiFields.add("deviceChannel");
    openapiFields.add("deviceRenderOptions");
    openapiFields.add("notificationURL");
    openapiFields.add("sdkAppID");
    openapiFields.add("sdkEncData");
    openapiFields.add("sdkEphemPubKey");
    openapiFields.add("sdkMaxTimeout");
    openapiFields.add("sdkReferenceNumber");
    openapiFields.add("sdkTransID");
    openapiFields.add("threeDSCompInd");
    openapiFields.add("threeDSRequestorURL");
    openapiFields.add("threeDSServerTransID");
    openapiFields.add("messageVersion");
    openapiFields.add("threeDSRequestorID");
    openapiFields.add("threeDSRequestorChallengeInd");
    openapiFields.add("threeDSRequestorName");
    openapiFields.add("acquirerBIN");
    openapiFields.add("acquirerMerchantID");
    openapiFields.add("mcc");
    openapiFields.add("merchantName");
    openapiFields.add("transactionType");
    openapiFields.add("whiteListStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThreeDS2RequestData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ThreeDS2RequestData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDS2RequestData is not found in the empty JSON string", ThreeDS2RequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ThreeDS2RequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThreeDS2RequestData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("challengeIndicator") != null && !jsonObj.get("challengeIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challengeIndicator").toString()));
      }
      if (jsonObj.get("deviceChannel") != null && !jsonObj.get("deviceChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceChannel").toString()));
      }
      // validate the optional field `deviceRenderOptions`
      if (jsonObj.getAsJsonObject("deviceRenderOptions") != null) {
        DeviceRenderOptions.validateJsonObject(jsonObj.getAsJsonObject("deviceRenderOptions"));
      }
      if (jsonObj.get("notificationURL") != null && !jsonObj.get("notificationURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationURL").toString()));
      }
      if (jsonObj.get("sdkAppID") != null && !jsonObj.get("sdkAppID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkAppID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkAppID").toString()));
      }
      if (jsonObj.get("sdkEncData") != null && !jsonObj.get("sdkEncData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkEncData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkEncData").toString()));
      }
      // validate the optional field `sdkEphemPubKey`
      if (jsonObj.getAsJsonObject("sdkEphemPubKey") != null) {
        SDKEphemPubKey.validateJsonObject(jsonObj.getAsJsonObject("sdkEphemPubKey"));
      }
      if (jsonObj.get("sdkReferenceNumber") != null && !jsonObj.get("sdkReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkReferenceNumber").toString()));
      }
      if (jsonObj.get("sdkTransID") != null && !jsonObj.get("sdkTransID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkTransID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkTransID").toString()));
      }
      if (jsonObj.get("threeDSCompInd") != null && !jsonObj.get("threeDSCompInd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSCompInd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSCompInd").toString()));
      }
      if (jsonObj.get("threeDSRequestorURL") != null && !jsonObj.get("threeDSRequestorURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorURL").toString()));
      }
      if (jsonObj.get("threeDSServerTransID") != null && !jsonObj.get("threeDSServerTransID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSServerTransID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSServerTransID").toString()));
      }
      if (jsonObj.get("messageVersion") != null && !jsonObj.get("messageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageVersion").toString()));
      }
      if (jsonObj.get("threeDSRequestorID") != null && !jsonObj.get("threeDSRequestorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorID").toString()));
      }
      if (jsonObj.get("threeDSRequestorChallengeInd") != null && !jsonObj.get("threeDSRequestorChallengeInd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorChallengeInd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorChallengeInd").toString()));
      }
      if (jsonObj.get("threeDSRequestorName") != null && !jsonObj.get("threeDSRequestorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorName").toString()));
      }
      if (jsonObj.get("acquirerBIN") != null && !jsonObj.get("acquirerBIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerBIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerBIN").toString()));
      }
      if (jsonObj.get("acquirerMerchantID") != null && !jsonObj.get("acquirerMerchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerMerchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerMerchantID").toString()));
      }
      if (jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if (jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if (jsonObj.get("whiteListStatus") != null && !jsonObj.get("whiteListStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteListStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whiteListStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDS2RequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDS2RequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDS2RequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDS2RequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDS2RequestData>() {
           @Override
           public void write(JsonWriter out, ThreeDS2RequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDS2RequestData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreeDS2RequestData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreeDS2RequestData
  * @throws IOException if the JSON string is invalid with respect to ThreeDS2RequestData
  */
  public static ThreeDS2RequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDS2RequestData.class);
  }

 /**
  * Convert an instance of ThreeDS2RequestData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

