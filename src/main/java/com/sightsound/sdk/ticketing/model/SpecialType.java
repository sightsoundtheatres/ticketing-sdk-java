/*
 * Helios
 * Sight & Sound Theatres Ticketing API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: DeveloperTeam@sight-sound.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sightsound.sdk.ticketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sightsound.sdk.ticketing.model.Special;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sightsound.sdk.ticketing.JSON;

/**
 * SpecialType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-01T17:37:03.061697Z[Etc/UTC]")
public class SpecialType {
  public static final String SERIALIZED_NAME_SPECIAL_CODE = "specialCode";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CODE)
  private String specialCode;

  public static final String SERIALIZED_NAME_CORP_AFFIL_CODE = "corpAffilCode";
  @SerializedName(SERIALIZED_NAME_CORP_AFFIL_CODE)
  private String corpAffilCode;

  public static final String SERIALIZED_NAME_CUST_TYPE_CODE = "custTypeCode";
  @SerializedName(SERIALIZED_NAME_CUST_TYPE_CODE)
  private String custTypeCode;

  public static final String SERIALIZED_NAME_SPECIAL = "special";
  @SerializedName(SERIALIZED_NAME_SPECIAL)
  private Special special;

  public SpecialType() { 
  }

  public SpecialType specialCode(String specialCode) {
    
    this.specialCode = specialCode;
    return this;
  }

   /**
   * Get specialCode
   * @return specialCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSpecialCode() {
    return specialCode;
  }


  public void setSpecialCode(String specialCode) {
    this.specialCode = specialCode;
  }


  public SpecialType corpAffilCode(String corpAffilCode) {
    
    this.corpAffilCode = corpAffilCode;
    return this;
  }

   /**
   * Get corpAffilCode
   * @return corpAffilCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCorpAffilCode() {
    return corpAffilCode;
  }


  public void setCorpAffilCode(String corpAffilCode) {
    this.corpAffilCode = corpAffilCode;
  }


  public SpecialType custTypeCode(String custTypeCode) {
    
    this.custTypeCode = custTypeCode;
    return this;
  }

   /**
   * Get custTypeCode
   * @return custTypeCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCustTypeCode() {
    return custTypeCode;
  }


  public void setCustTypeCode(String custTypeCode) {
    this.custTypeCode = custTypeCode;
  }


  public SpecialType special(Special special) {
    
    this.special = special;
    return this;
  }

   /**
   * Get special
   * @return special
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Special getSpecial() {
    return special;
  }


  public void setSpecial(Special special) {
    this.special = special;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialType specialType = (SpecialType) o;
    return Objects.equals(this.specialCode, specialType.specialCode) &&
        Objects.equals(this.corpAffilCode, specialType.corpAffilCode) &&
        Objects.equals(this.custTypeCode, specialType.custTypeCode) &&
        Objects.equals(this.special, specialType.special);
  }

  @Override
  public int hashCode() {
    return Objects.hash(specialCode, corpAffilCode, custTypeCode, special);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialType {\n");
    sb.append("    specialCode: ").append(toIndentedString(specialCode)).append("\n");
    sb.append("    corpAffilCode: ").append(toIndentedString(corpAffilCode)).append("\n");
    sb.append("    custTypeCode: ").append(toIndentedString(custTypeCode)).append("\n");
    sb.append("    special: ").append(toIndentedString(special)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("specialCode");
    openapiFields.add("corpAffilCode");
    openapiFields.add("custTypeCode");
    openapiFields.add("special");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("specialCode");
    openapiRequiredFields.add("corpAffilCode");
    openapiRequiredFields.add("custTypeCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SpecialType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SpecialType.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpecialType is not found in the empty JSON string", SpecialType.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SpecialType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpecialType` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpecialType.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("specialCode") != null && !jsonObj.get("specialCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialCode").toString()));
      }
      if (jsonObj.get("corpAffilCode") != null && !jsonObj.get("corpAffilCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corpAffilCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corpAffilCode").toString()));
      }
      if (jsonObj.get("custTypeCode") != null && !jsonObj.get("custTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custTypeCode").toString()));
      }
      // validate the optional field `special`
      if (jsonObj.getAsJsonObject("special") != null) {
        Special.validateJsonObject(jsonObj.getAsJsonObject("special"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpecialType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpecialType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpecialType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpecialType.class));

       return (TypeAdapter<T>) new TypeAdapter<SpecialType>() {
           @Override
           public void write(JsonWriter out, SpecialType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpecialType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpecialType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpecialType
  * @throws IOException if the JSON string is invalid with respect to SpecialType
  */
  public static SpecialType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpecialType.class);
  }

 /**
  * Convert an instance of SpecialType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

