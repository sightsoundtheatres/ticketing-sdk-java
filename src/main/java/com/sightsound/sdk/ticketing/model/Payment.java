/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sightsound.sdk.ticketing.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sightsound.sdk.ticketing.model.ACHRequest;
import com.sightsound.sdk.ticketing.model.PaperCheckRequest;
import com.sightsound.sdk.ticketing.model.PaymentAch;
import com.sightsound.sdk.ticketing.model.PaymentAppliedDetail;
import com.sightsound.sdk.ticketing.model.PaymentCreditCard;
import com.sightsound.sdk.ticketing.model.PaymentGiftCard;
import com.sightsound.sdk.ticketing.model.PaymentsRequest;
import com.sightsound.sdk.ticketing.model.ReceiptPaymentType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.sightsound.sdk.ticketing.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-30T16:06:07.372728-05:00[America/Chicago]")
public class Payment {
  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private ReceiptPaymentType paymentType;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_TRANS_SEQUENCE_NUMBER = "transSequenceNumber";
  @SerializedName(SERIALIZED_NAME_TRANS_SEQUENCE_NUMBER)
  private Long transSequenceNumber;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<PaperCheckRequest> checks = null;

  public static final String SERIALIZED_NAME_ACH_REQUEST = "achRequest";
  @SerializedName(SERIALIZED_NAME_ACH_REQUEST)
  private ACHRequest achRequest;

  public static final String SERIALIZED_NAME_PAYMENT_ACH = "paymentAch";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACH)
  private PaymentAch paymentAch;

  public static final String SERIALIZED_NAME_PAYMENT_CREDIT_CARD = "paymentCreditCard";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CREDIT_CARD)
  private PaymentCreditCard paymentCreditCard;

  public static final String SERIALIZED_NAME_ADYEN_PAYMENT_REQUEST = "adyenPaymentRequest";
  @SerializedName(SERIALIZED_NAME_ADYEN_PAYMENT_REQUEST)
  private PaymentsRequest adyenPaymentRequest;

  public static final String SERIALIZED_NAME_GIFT_CARDS = "giftCards";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS)
  private List<PaymentGiftCard> giftCards = null;

  public static final String SERIALIZED_NAME_STORE_CREDIT_CARD = "storeCreditCard";
  @SerializedName(SERIALIZED_NAME_STORE_CREDIT_CARD)
  private Boolean storeCreditCard;

  public static final String SERIALIZED_NAME_APPLY_MOA = "applyMoa";
  @SerializedName(SERIALIZED_NAME_APPLY_MOA)
  private Boolean applyMoa;

  public static final String SERIALIZED_NAME_PAYMENT_APPLIED_INFO = "paymentAppliedInfo";
  @SerializedName(SERIALIZED_NAME_PAYMENT_APPLIED_INFO)
  private String paymentAppliedInfo;

  public static final String SERIALIZED_NAME_CASH_APPLIED = "cashApplied";
  @SerializedName(SERIALIZED_NAME_CASH_APPLIED)
  private PaymentAppliedDetail cashApplied;

  public static final String SERIALIZED_NAME_MOA_APPLIED = "moaApplied";
  @SerializedName(SERIALIZED_NAME_MOA_APPLIED)
  private PaymentAppliedDetail moaApplied;

  public Payment() { 
  }

  public Payment paymentDate(OffsetDateTime paymentDate) {
    
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Get paymentDate
   * @return paymentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }


  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public Payment amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Payment paymentType(ReceiptPaymentType paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReceiptPaymentType getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(ReceiptPaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public Payment accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Payment transSequenceNumber(Long transSequenceNumber) {
    
    this.transSequenceNumber = transSequenceNumber;
    return this;
  }

   /**
   * Get transSequenceNumber
   * @return transSequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getTransSequenceNumber() {
    return transSequenceNumber;
  }


  public void setTransSequenceNumber(Long transSequenceNumber) {
    this.transSequenceNumber = transSequenceNumber;
  }


  public Payment checks(List<PaperCheckRequest> checks) {
    
    this.checks = checks;
    return this;
  }

  public Payment addChecksItem(PaperCheckRequest checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaperCheckRequest> getChecks() {
    return checks;
  }


  public void setChecks(List<PaperCheckRequest> checks) {
    this.checks = checks;
  }


  public Payment achRequest(ACHRequest achRequest) {
    
    this.achRequest = achRequest;
    return this;
  }

   /**
   * Get achRequest
   * @return achRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ACHRequest getAchRequest() {
    return achRequest;
  }


  public void setAchRequest(ACHRequest achRequest) {
    this.achRequest = achRequest;
  }


  public Payment paymentAch(PaymentAch paymentAch) {
    
    this.paymentAch = paymentAch;
    return this;
  }

   /**
   * Get paymentAch
   * @return paymentAch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentAch getPaymentAch() {
    return paymentAch;
  }


  public void setPaymentAch(PaymentAch paymentAch) {
    this.paymentAch = paymentAch;
  }


  public Payment paymentCreditCard(PaymentCreditCard paymentCreditCard) {
    
    this.paymentCreditCard = paymentCreditCard;
    return this;
  }

   /**
   * Get paymentCreditCard
   * @return paymentCreditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentCreditCard getPaymentCreditCard() {
    return paymentCreditCard;
  }


  public void setPaymentCreditCard(PaymentCreditCard paymentCreditCard) {
    this.paymentCreditCard = paymentCreditCard;
  }


  public Payment adyenPaymentRequest(PaymentsRequest adyenPaymentRequest) {
    
    this.adyenPaymentRequest = adyenPaymentRequest;
    return this;
  }

   /**
   * Get adyenPaymentRequest
   * @return adyenPaymentRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentsRequest getAdyenPaymentRequest() {
    return adyenPaymentRequest;
  }


  public void setAdyenPaymentRequest(PaymentsRequest adyenPaymentRequest) {
    this.adyenPaymentRequest = adyenPaymentRequest;
  }


  public Payment giftCards(List<PaymentGiftCard> giftCards) {
    
    this.giftCards = giftCards;
    return this;
  }

  public Payment addGiftCardsItem(PaymentGiftCard giftCardsItem) {
    if (this.giftCards == null) {
      this.giftCards = new ArrayList<>();
    }
    this.giftCards.add(giftCardsItem);
    return this;
  }

   /**
   * Get giftCards
   * @return giftCards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaymentGiftCard> getGiftCards() {
    return giftCards;
  }


  public void setGiftCards(List<PaymentGiftCard> giftCards) {
    this.giftCards = giftCards;
  }


  public Payment storeCreditCard(Boolean storeCreditCard) {
    
    this.storeCreditCard = storeCreditCard;
    return this;
  }

   /**
   * Get storeCreditCard
   * @return storeCreditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getStoreCreditCard() {
    return storeCreditCard;
  }


  public void setStoreCreditCard(Boolean storeCreditCard) {
    this.storeCreditCard = storeCreditCard;
  }


  public Payment applyMoa(Boolean applyMoa) {
    
    this.applyMoa = applyMoa;
    return this;
  }

   /**
   * Get applyMoa
   * @return applyMoa
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getApplyMoa() {
    return applyMoa;
  }


  public void setApplyMoa(Boolean applyMoa) {
    this.applyMoa = applyMoa;
  }


  public Payment paymentAppliedInfo(String paymentAppliedInfo) {
    
    this.paymentAppliedInfo = paymentAppliedInfo;
    return this;
  }

   /**
   * Get paymentAppliedInfo
   * @return paymentAppliedInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentAppliedInfo() {
    return paymentAppliedInfo;
  }


  public void setPaymentAppliedInfo(String paymentAppliedInfo) {
    this.paymentAppliedInfo = paymentAppliedInfo;
  }


  public Payment cashApplied(PaymentAppliedDetail cashApplied) {
    
    this.cashApplied = cashApplied;
    return this;
  }

   /**
   * Get cashApplied
   * @return cashApplied
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentAppliedDetail getCashApplied() {
    return cashApplied;
  }


  public void setCashApplied(PaymentAppliedDetail cashApplied) {
    this.cashApplied = cashApplied;
  }


  public Payment moaApplied(PaymentAppliedDetail moaApplied) {
    
    this.moaApplied = moaApplied;
    return this;
  }

   /**
   * Get moaApplied
   * @return moaApplied
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentAppliedDetail getMoaApplied() {
    return moaApplied;
  }


  public void setMoaApplied(PaymentAppliedDetail moaApplied) {
    this.moaApplied = moaApplied;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.paymentDate, payment.paymentDate) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.paymentType, payment.paymentType) &&
        Objects.equals(this.accountNumber, payment.accountNumber) &&
        Objects.equals(this.transSequenceNumber, payment.transSequenceNumber) &&
        Objects.equals(this.checks, payment.checks) &&
        Objects.equals(this.achRequest, payment.achRequest) &&
        Objects.equals(this.paymentAch, payment.paymentAch) &&
        Objects.equals(this.paymentCreditCard, payment.paymentCreditCard) &&
        Objects.equals(this.adyenPaymentRequest, payment.adyenPaymentRequest) &&
        Objects.equals(this.giftCards, payment.giftCards) &&
        Objects.equals(this.storeCreditCard, payment.storeCreditCard) &&
        Objects.equals(this.applyMoa, payment.applyMoa) &&
        Objects.equals(this.paymentAppliedInfo, payment.paymentAppliedInfo) &&
        Objects.equals(this.cashApplied, payment.cashApplied) &&
        Objects.equals(this.moaApplied, payment.moaApplied);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentDate, amount, paymentType, accountNumber, transSequenceNumber, checks, achRequest, paymentAch, paymentCreditCard, adyenPaymentRequest, giftCards, storeCreditCard, applyMoa, paymentAppliedInfo, cashApplied, moaApplied);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    transSequenceNumber: ").append(toIndentedString(transSequenceNumber)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    achRequest: ").append(toIndentedString(achRequest)).append("\n");
    sb.append("    paymentAch: ").append(toIndentedString(paymentAch)).append("\n");
    sb.append("    paymentCreditCard: ").append(toIndentedString(paymentCreditCard)).append("\n");
    sb.append("    adyenPaymentRequest: ").append(toIndentedString(adyenPaymentRequest)).append("\n");
    sb.append("    giftCards: ").append(toIndentedString(giftCards)).append("\n");
    sb.append("    storeCreditCard: ").append(toIndentedString(storeCreditCard)).append("\n");
    sb.append("    applyMoa: ").append(toIndentedString(applyMoa)).append("\n");
    sb.append("    paymentAppliedInfo: ").append(toIndentedString(paymentAppliedInfo)).append("\n");
    sb.append("    cashApplied: ").append(toIndentedString(cashApplied)).append("\n");
    sb.append("    moaApplied: ").append(toIndentedString(moaApplied)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentDate");
    openapiFields.add("amount");
    openapiFields.add("paymentType");
    openapiFields.add("accountNumber");
    openapiFields.add("transSequenceNumber");
    openapiFields.add("checks");
    openapiFields.add("achRequest");
    openapiFields.add("paymentAch");
    openapiFields.add("paymentCreditCard");
    openapiFields.add("adyenPaymentRequest");
    openapiFields.add("giftCards");
    openapiFields.add("storeCreditCard");
    openapiFields.add("applyMoa");
    openapiFields.add("paymentAppliedInfo");
    openapiFields.add("cashApplied");
    openapiFields.add("moaApplied");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Payment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Payment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Payment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
      if (jsonArraychecks != null) {
        // ensure the json data is an array
        if (!jsonObj.get("checks").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
        }

        // validate the optional field `checks` (array)
        for (int i = 0; i < jsonArraychecks.size(); i++) {
          PaperCheckRequest.validateJsonObject(jsonArraychecks.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `achRequest`
      if (jsonObj.getAsJsonObject("achRequest") != null) {
        ACHRequest.validateJsonObject(jsonObj.getAsJsonObject("achRequest"));
      }
      // validate the optional field `paymentAch`
      if (jsonObj.getAsJsonObject("paymentAch") != null) {
        PaymentAch.validateJsonObject(jsonObj.getAsJsonObject("paymentAch"));
      }
      // validate the optional field `paymentCreditCard`
      if (jsonObj.getAsJsonObject("paymentCreditCard") != null) {
        PaymentCreditCard.validateJsonObject(jsonObj.getAsJsonObject("paymentCreditCard"));
      }
      // validate the optional field `adyenPaymentRequest`
      if (jsonObj.getAsJsonObject("adyenPaymentRequest") != null) {
        PaymentsRequest.validateJsonObject(jsonObj.getAsJsonObject("adyenPaymentRequest"));
      }
      JsonArray jsonArraygiftCards = jsonObj.getAsJsonArray("giftCards");
      if (jsonArraygiftCards != null) {
        // ensure the json data is an array
        if (!jsonObj.get("giftCards").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `giftCards` to be an array in the JSON string but got `%s`", jsonObj.get("giftCards").toString()));
        }

        // validate the optional field `giftCards` (array)
        for (int i = 0; i < jsonArraygiftCards.size(); i++) {
          PaymentGiftCard.validateJsonObject(jsonArraygiftCards.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("paymentAppliedInfo") != null && !jsonObj.get("paymentAppliedInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAppliedInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAppliedInfo").toString()));
      }
      // validate the optional field `cashApplied`
      if (jsonObj.getAsJsonObject("cashApplied") != null) {
        PaymentAppliedDetail.validateJsonObject(jsonObj.getAsJsonObject("cashApplied"));
      }
      // validate the optional field `moaApplied`
      if (jsonObj.getAsJsonObject("moaApplied") != null) {
        PaymentAppliedDetail.validateJsonObject(jsonObj.getAsJsonObject("moaApplied"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Payment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Payment
  * @throws IOException if the JSON string is invalid with respect to Payment
  */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

 /**
  * Convert an instance of Payment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

